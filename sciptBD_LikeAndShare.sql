DROP TABLE LIVRE CASCADE CONSTRAINTS;DROP TABLE UTILISATEUR CASCADE CONSTRAINTS;DROP TABLE ARTISTE CASCADE CONSTRAINTS;DROP TABLE MEDIA CASCADE CONSTRAINTS;DROP TABLE SEMAINE CASCADE CONSTRAINTS;DROP TABLE FILM CASCADE CONSTRAINTS;DROP TABLE TITRE_MUSICAL CASCADE CONSTRAINTS;DROP TABLE AUTRE_AUTEUR CASCADE CONSTRAINTS;DROP TABLE SCROBBLING CASCADE CONSTRAINTS;-- -------------------------------------------------------------------------------       TABLE : UTILISATEUR-- -----------------------------------------------------------------------------CREATE TABLE UTILISATEUR   (    PSEUDO VARCHAR(100)  ,    MOT_DE_PASSE VARCHAR(100)  NOT NULL,    CATEGORIE_AGE VARCHAR(100)  NULL CHECK (CATEGORIE_AGE IN ('0-20', '21-30','31-101')),    CODE_POSTAL VARCHAR(5)  NOT NULL,   CONSTRAINT PK_UTILISATEUR PRIMARY KEY (PSEUDO)     ) ;-- -------------------------------------------------------------------------------       TABLE : ARTISTE-- -----------------------------------------------------------------------------CREATE TABLE ARTISTE   (    NOM_ARTISTE VARCHAR(100)  ,    NOM VARCHAR(100)  NOT NULL,    PRENOM VARCHAR(100)  NOT NULL,   CONSTRAINT PK_ARTISTE_LIKE PRIMARY KEY (NOM_ARTISTE)     ) ;-- -------------------------------------------------------------------------------       TABLE : MEDIA-- -----------------------------------------------------------------------------CREATE TABLE MEDIA   (    NOM_ARTISTE VARCHAR(100) ,    TITRE VARCHAR(100),    ANNEE_EDITION NUMBER(4)  DEFAULT to_char(sysdate,'YYYY') NOT NULL,    LANGUE VARCHAR(100)  NULL CHECK (LANGUE IN ('fr', 'angl',  'autre')),    EDITEUR VARCHAR(100)  NOT NULL,   CONSTRAINT PK_MEDIA PRIMARY KEY (NOM_ARTISTE, TITRE)     ) ;-- -------------------------------------------------------------------------------       TABLE : LIVRE-- -----------------------------------------------------------------------------CREATE TABLE LIVRE   (    NOM_ARTISTE VARCHAR(100)  ,    TITRE VARCHAR(100)  ,    GENRE_LITTERAIRE VARCHAR(100)   NULL CHECK (GENRE_LITTERAIRE  IN ('roman', 'essai', 'nouvelle' ,'autre')),    CONSTRAINT PK_LIVRE_LIKE PRIMARY KEY (NOM_ARTISTE, TITRE)     ) ;-- -------------------------------------------------------------------------------       TABLE : FILM-- -----------------------------------------------------------------------------CREATE TABLE FILM   (    NOM_ARTISTE VARCHAR(100)  ,    TITRE VARCHAR(100)  ,    GENRE_CINEMA VARCHAR(100)   NULL CHECK (GENRE_CINEMA IN ('comedie', 'SF', 'horreur' ,'autre')) ,    CONSTRAINT PK_FILM_LIKE PRIMARY KEY (NOM_ARTISTE, TITRE)     ) ;-- -------------------------------------------------------------------------------       TABLE : TITRE_MUSICAL-- -----------------------------------------------------------------------------CREATE TABLE TITRE_MUSICAL   (    NOM_ARTISTE VARCHAR(100) ,    TITRE VARCHAR(100),    DUREE NUMBER(5,2)  NOT NULL,    GENRE_MUSICAL VARCHAR(100)  NULL CHECK (GENRE_MUSICAL IN ('rock', 'rap', 'pop' ,'autre')),    TYPE_ALBUM VARCHAR(100)  NOT NULL CHECK (TYPE_ALBUM IN ('single','full', 'mini')),    CONSTRAINT PK_TITRE_MUSICAL PRIMARY KEY (NOM_ARTISTE, TITRE)     ) ;-- -------------------------------------------------------------------------------       TABLE : SEMAINE (penser à ajouter une semaine chaque dimanche)-- -----------------------------------------------------------------------------CREATE TABLE SEMAINE   (    NUM_SEMAINE NUMBER(2)   CHECK (NUM_SEMAINE >0 AND NUM_SEMAINE <53),    ANNEE NUMBER(4) ,       CONSTRAINT PK_SEMAINE PRIMARY KEY (NUM_SEMAINE, ANNEE)     ) ;-- -------------------------------------------------------------------------------       TABLE : AUTRE_AUTEUR-- -----------------------------------------------------------------------------CREATE TABLE AUTRE_AUTEUR   (    NOM_ARTISTE VARCHAR(100) ,    TITRE VARCHAR(100) ,    NOM_ARTISTE_1 VARCHAR(100),    ROLE_AA VARCHAR(100)  NOT NULL CHECK (ROLE_AA IN ('compositeur', 'producteur', 'acteur' ,'autre')) ,    CONSTRAINT PK_AUTRE_AUTEUR PRIMARY KEY (NOM_ARTISTE, TITRE, NOM_ARTISTE_1)     ) ;-- -------------------------------------------------------------------------------       TABLE : SCROBBLING-- -----------------------------------------------------------------------------CREATE TABLE SCROBBLING   (    NOM_ARTISTE VARCHAR(100) ,    TITRE VARCHAR(100) ,    PSEUDO VARCHAR(100)  ,    DATE_SCROBBLING VARCHAR(100)  DEFAULT sysdate,    CONSTRAINT PK_SCROBBLING PRIMARY KEY (NOM_ARTISTE, TITRE, PSEUDO, DATE_SCROBBLING)     ) ;-- -------------------------------------------------------------------------------       CREATION DES REFERENCES DE TABLE-- -----------------------------------------------------------------------------ALTER TABLE LIVRE ADD (     CONSTRAINT FK_LIVRE_MEDIA          FOREIGN KEY (NOM_ARTISTE, TITRE)               REFERENCES MEDIA (NOM_ARTISTE, TITRE))   ;ALTER TABLE MEDIA ADD (     CONSTRAINT FK_MEDIA_ARTISTE          FOREIGN KEY (NOM_ARTISTE)               REFERENCES ARTISTE (NOM_ARTISTE) ON DELETE CASCADE)   ;ALTER TABLE FILM ADD (     CONSTRAINT FK_FILM_MEDIA          FOREIGN KEY (NOM_ARTISTE, TITRE)               REFERENCES MEDIA (NOM_ARTISTE, TITRE) )   ;ALTER TABLE TITRE_MUSICAL ADD (     CONSTRAINT FK_TITRE_MUSICAL_MEDIA          FOREIGN KEY (NOM_ARTISTE, TITRE)               REFERENCES MEDIA (NOM_ARTISTE, TITRE))   ;ALTER TABLE AUTRE_AUTEUR ADD (     CONSTRAINT FK_AUTRE_AUTEUR_MEDIA          FOREIGN KEY (NOM_ARTISTE, TITRE)               REFERENCES MEDIA (NOM_ARTISTE, TITRE))   ;ALTER TABLE AUTRE_AUTEUR ADD (     CONSTRAINT FK_AUTRE_AUTEUR_ARTISTE          FOREIGN KEY (NOM_ARTISTE_1)               REFERENCES ARTISTE (NOM_ARTISTE))   ;ALTER TABLE SCROBBLING ADD (     CONSTRAINT FK_SCROBBLING_MEDIA          FOREIGN KEY (NOM_ARTISTE, TITRE)               REFERENCES MEDIA (NOM_ARTISTE, TITRE))   ;ALTER TABLE SCROBBLING ADD (     CONSTRAINT FK_SCROBBLING_UTILISATEUR          FOREIGN KEY (PSEUDO)               REFERENCES UTILISATEUR (PSEUDO))   ;-- --------------------------------------------------------------------------------------------                FIN modèle physique-- -------------------------------------------------------------------------------------------- ---------------------------------------------------------------------------------------------                Definition des vues -- -------------------------------------------------------------------------------------------

CREATE OR REPLACE VIEW V_SCROB_ARTISTE  AS (SELECT   NOM_ARTISTE, count(*) as    NB_SCROB_TOTALFROM   SCROBBLING GROUP BY NOM_ARTISTE);
CREATE OR REPLACE VIEW V_SCROB_ARTISTE_SEMAINE  AS (SELECT   NOM_ARTISTE, NUM_SEMAINE,  ANNEE , count(*) as    NB_SCROB_SEMAINEFROM  SCROBBLING , SEMAINEWHERE   to_char(DATE_SCROBBLING,'YYYY') = ANNEE AND to_number(to_char(DATE_SCROBBLING,'WW')) = NUM_SEMAINEGROUP BY NOM_ARTISTE, NUM_SEMAINE,  ANNEE);CREATE OR REPLACE VIEW V_SCROB_MEDIA  AS (SELECT   NOM_ARTISTE, TITRE, count(*)  as    NB_SCROB_TOTALFROM  SCROBBLING GROUP BY NOM_ARTISTE, TITRE);CREATE OR REPLACE VIEW V_SCROB_MEDIA_SEMAINE  AS (SELECT   NOM_ARTISTE, TITRE, NUM_SEMAINE,  ANNEE , count(*) as    NB_SCROB_SEMAINEFROM  SCROBBLING , SEMAINEWHERE   to_char(DATE_SCROBBLING,'YYYY') = ANNEE AND to_number(to_char(DATE_SCROBBLING,'WW')) = NUM_SEMAINEGROUP BY NOM_ARTISTE, TITRE, NUM_SEMAINE,  ANNEE);CREATE OR REPLACE VIEW V_STAT_ARTISTE AS (SELECT   PSEUDO, NOM_ARTISTE, count(*) as    NB_SCROB_TOTALFROM  SCROBBLINGGROUP BY PSEUDO , NOM_ARTISTE);CREATE OR REPLACE VIEW V_STAT_ARTISTE_SEMAINE  AS (SELECT   PSEUDO, NOM_ARTISTE, NUM_SEMAINE,  ANNEE , count(*) as    NB_SCROB_SEMAINEFROM  SCROBBLING , SEMAINEWHERE   to_char(DATE_SCROBBLING,'YYYY') = ANNEE AND to_number(to_char(DATE_SCROBBLING,'WW')) = NUM_SEMAINEGROUP BY PSEUDO , NOM_ARTISTE, NUM_SEMAINE,  ANNEE);CREATE OR REPLACE VIEW V_STAT_MEDIA  AS (SELECT   PSEUDO, NOM_ARTISTE, TITRE, count(*)  as    NB_SCROB_TOTALFROM  SCROBBLING GROUP BY PSEUDO, NOM_ARTISTE, TITRE);CREATE OR REPLACE VIEW V_STAT_MEDIA_SEMAINE  AS (SELECT   PSEUDO, NOM_ARTISTE, TITRE, NUM_SEMAINE,  ANNEE , count(*)  as    NB_SCROB_SEMAINEFROM  SCROBBLING , SEMAINEWHERE   to_char(DATE_SCROBBLING,'YYYY') = ANNEE AND to_number(to_char(DATE_SCROBBLING,'WW')) = NUM_SEMAINEGROUP BY PSEUDO, NOM_ARTISTE, TITRE, NUM_SEMAINE,  ANNEE);